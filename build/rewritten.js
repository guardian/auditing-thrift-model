//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = { Thrift: require('thrift/lib/nodejs/lib/thrift/thrift') };
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = module.exports = {};
ttypes.App = {
  'FaciaTool' : 1,
  'StoryPackages' : 2
};
Notification = module.exports.Notification = function(args) {
  this.app = null;
  this.operation = null;
  this.userEmail = null;
  this.date = null;
  this.resourceId = null;
  this.message = null;
  if (args) {
    if (args.app !== undefined && args.app !== null) {
      this.app = args.app;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field app is unset!');
    }
    if (args.operation !== undefined && args.operation !== null) {
      this.operation = args.operation;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field operation is unset!');
    }
    if (args.userEmail !== undefined && args.userEmail !== null) {
      this.userEmail = args.userEmail;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field userEmail is unset!');
    }
    if (args.date !== undefined && args.date !== null) {
      this.date = args.date;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field date is unset!');
    }
    if (args.resourceId !== undefined && args.resourceId !== null) {
      this.resourceId = args.resourceId;
    }
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
  }
};
Notification.prototype = {};
Notification.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.app = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.operation = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.userEmail = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.date = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.resourceId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Notification.prototype.write = function(output) {
  output.writeStructBegin('Notification');
  if (this.app !== null && this.app !== undefined) {
    output.writeFieldBegin('app', Thrift.Type.I32, 1);
    output.writeI32(this.app);
    output.writeFieldEnd();
  }
  if (this.operation !== null && this.operation !== undefined) {
    output.writeFieldBegin('operation', Thrift.Type.STRING, 2);
    output.writeString(this.operation);
    output.writeFieldEnd();
  }
  if (this.userEmail !== null && this.userEmail !== undefined) {
    output.writeFieldBegin('userEmail', Thrift.Type.STRING, 3);
    output.writeString(this.userEmail);
    output.writeFieldEnd();
  }
  if (this.date !== null && this.date !== undefined) {
    output.writeFieldBegin('date', Thrift.Type.STRING, 4);
    output.writeString(this.date);
    output.writeFieldEnd();
  }
  if (this.resourceId !== null && this.resourceId !== undefined) {
    output.writeFieldBegin('resourceId', Thrift.Type.STRING, 5);
    output.writeString(this.resourceId);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 6);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};


// APPENDED TO AUTO_GENERATED FILE

var appIdToName = {};
for (var key in model.App) {
	if (model.App.hasOwnProperty(key)) {
		appIdToName[model.App[key]] = key;
	}
}

Notification.prototype.getAppName = function () {
	return appIdToName[this.app];
};
